{"ast":null,"code":"import React from 'react';\nvar twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\nvar methodName = 'createTimeline';\n\nvar TwitterTimelineEmbed = function TwitterTimelineEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  var buildOptions = function buildOptions() {\n    var options = Object.assign({}, props.options);\n\n    if (props !== null && props !== void 0 && props.autoHeight) {\n      var _ref$current, _ref$current$parentNo;\n\n      options.height = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentNo = _ref$current.parentNode) === null || _ref$current$parentNo === void 0 ? void 0 : _ref$current$parentNo.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props === null || props === void 0 ? void 0 : props.theme,\n      linkColor: props === null || props === void 0 ? void 0 : props.linkColor,\n      borderColor: props === null || props === void 0 ? void 0 : props.borderColor,\n      lang: props === null || props === void 0 ? void 0 : props.lang,\n      tweetLimit: props === null || props === void 0 ? void 0 : props.tweetLimit,\n      ariaPolite: props === null || props === void 0 ? void 0 : props.ariaPolite\n    });\n    return options;\n  };\n\n  var buildChromeOptions = function buildChromeOptions(options) {\n    options.chrome = '';\n\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\"Method \" + methodName + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        var options = buildOptions();\n        options = buildChromeOptions(options);\n        window.twttr.widgets[methodName]({\n          sourceType: props.sourceType,\n          screenName: props.screenName,\n          userId: props.userId,\n          ownerScreenName: props.ownerScreenName,\n          slug: props.slug,\n          id: props.id || props.widgetId,\n          url: props.url\n        }, ref === null || ref === void 0 ? void 0 : ref.current, options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$1 = 'createShareButton';\n\nvar TwitterShareButton = function TwitterShareButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$1]) {\n          console.error(\"Method \" + methodName$1 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$1](props.url, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$2 = 'createFollowButton';\n\nvar TwitterFollowButton = function TwitterFollowButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$2]) {\n          console.error(\"Method \" + methodName$2 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$2](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$3 = 'createHashtagButton';\n\nvar TwitterHashtagButton = function TwitterHashtagButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$3]) {\n          console.error(\"Method \" + methodName$3 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$3](props.tag, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$4 = 'createMentionButton';\n\nvar TwitterMentionButton = function TwitterMentionButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$4]) {\n          console.error(\"Method \" + methodName$4 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$4](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$5 = 'createTweet';\n\nvar TwitterTweetEmbed = function TwitterTweetEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$5]) {\n          console.error(\"Method \" + methodName$5 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$5](props.tweetId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$6 = 'createMoment';\n\nvar TwitterMomentShare = function TwitterMomentShare(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$6]) {\n          console.error(\"Method \" + methodName$6 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$6](props.momentId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$7 = 'createDMButton';\n\nvar TwitterDMButton = function TwitterDMButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$7]) {\n          console.error(\"Method \" + methodName$7 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$7](props.id, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          if (isComponentMounted) {\n            setLoading(false);\n\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$8 = 'createVideo';\n\nvar TwitterVideoEmbed = function TwitterVideoEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$8]) {\n          console.error(\"Method \" + methodName$8 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$8](props.id, ref === null || ref === void 0 ? void 0 : ref.current).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$9 = 'createPeriscopeOnAirButton';\n\nvar TwitterOnAirButton = function TwitterOnAirButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$9]) {\n          console.error(\"Method \" + methodName$9 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$9](props.username, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nexport { TwitterDMButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterMomentShare, TwitterOnAirButton, TwitterShareButton, TwitterTimelineEmbed, TwitterTweetEmbed, TwitterVideoEmbed };","map":{"version":3,"mappings":"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","names":["twitterWidgetJs","methodName","TwitterTimelineEmbed","props","ref","React","useRef","useState","loading","setLoading","buildOptions","options","Object","assign","autoHeight","height","current","_ref$current","parentNode","_ref$current$parentNo","offsetHeight","theme","linkColor","borderColor","lang","tweetLimit","ariaPolite","buildChromeOptions","chrome","noHeader","noFooter","noBorders","noScrollbar","transparent","useEffect","isComponentMounted","script","require","window","twttr","console","error","widgets","sourceType","screenName","userId","ownerScreenName","slug","id","widgetId","url","then","element","onLoad","Fragment","placeholder","TwitterShareButton","TwitterFollowButton","TwitterHashtagButton","tag","TwitterMentionButton","TwitterTweetEmbed","tweetId","TwitterMomentShare","momentId","TwitterDMButton","TwitterVideoEmbed","TwitterOnAirButton","username"],"sources":["/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/twiter-widget-url.ts","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterTimelineEmbed.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterShareButton.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterFollowButton.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterHashtagButton.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterMentionButton.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterTweetEmbed.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterMomentShare.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterDMButton.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterVideoEmbed.tsx","/home/yash/Desktop/JavaScripts Projects/Social_Media/client/node_modules/react-twitter-embed/src/components/TwitterOnAirButton.tsx"],"sourcesContent":["const twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nexport default twitterWidgetJs;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTimelineEmbedBase {\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Automatically fit into parent container height\n   */\n  autoHeight?: boolean;\n  /**\n   * With dark or light theme\n   */\n  theme?: 'dark' | 'light';\n  /**\n   * With custom link colors. Note: Only Hex colors are supported.\n   */\n  linkColor?: string;\n  /**\n   * With custom border colors. Note: Only Hex colors are supported.\n   */\n  borderColor?: string;\n  /**\n   * Hide the header from timeline\n   */\n  noHeader?: boolean;\n  /**\n   * Hide the footer from timeline\n   */\n  noFooter?: boolean;\n  /**\n   * Hide the border from timeline\n   */\n  noBorders?: boolean;\n  /**\n   * Hide the scrollbars\n   */\n  noScrollbar?: boolean;\n  /**\n   * Enable Transparancy\n   */\n  transparent?: boolean;\n  /**\n   * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n   */\n  lang?: string;\n  /**\n   * ariaPolite\n   */\n  ariaPolite?: 'polite' | 'assertive' | 'rude';\n  /**\n   * Limit of tweets to be shown\n   */\n  tweetLimit?: number;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nexport interface TwitterTimelineEmbedSourceScreenName\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * username of twitter handle as String\n   */\n  screenName: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUserId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * UserId of twitter handle as number\n   */\n  userId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimeline\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimelineWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  widgetId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceList\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, used along with slug\n   */\n  ownerScreenName: string;\n  /**\n   * To show list, used along with ownerScreenName\n   */\n  slug: string;\n}\n\nexport interface TwitterTimelineEmbedSourceListId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list url\n   * Also used with collections, in that case its valid collection id\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be url\n   */\n  sourceType: 'url';\n  /**\n   * To show twitter content with url.\n   * Supported content includes profiles, likes, lists, and collections.\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be widget\n   */\n  sourceType: 'widget';\n  /**\n   * To show custom widget\n   */\n  widgetId: string;\n}\n\nexport type TwitterTimelineEmbedPropsType =\n  | TwitterTimelineEmbedSourceScreenName\n  | TwitterTimelineEmbedSourceUserId\n  | TwitterTimelineEmbedSourceTimeline\n  | TwitterTimelineEmbedSourceTimelineWidget\n  | TwitterTimelineEmbedSourceList\n  | TwitterTimelineEmbedSourceListId\n  | TwitterTimelineEmbedSourceCollectionId\n  | TwitterTimelineEmbedSourceCollectionUrl\n  | TwitterTimelineEmbedSourceUrl\n  | TwitterTimelineEmbedSourceWidget;\n\n// export interface TwitterTimelineEmbedProps {\n//   sourceType: 'profile' | 'likes' | 'list' | 'collection' | 'URL' | 'widget'\n//   url: string;\n//   options?: JSONObject,\n//   placeholder?: string | React.ReactNode;\n//   onLoad?: (element: any) => void;\n// };\n\nconst methodName = 'createTimeline';\n\nconst TwitterTimelineEmbed = (props: TwitterTimelineEmbedPropsType): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  const buildOptions = () => {\n    let options = Object.assign({}, props.options);\n    if (props?.autoHeight) {\n      options.height = (ref.current?.parentNode as HTMLElement)?.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props?.theme,\n      linkColor: props?.linkColor,\n      borderColor: props?.borderColor,\n      lang: props?.lang,\n      tweetLimit: props?.tweetLimit,\n      ariaPolite: props?.ariaPolite\n    });\n\n    return options;\n  };\n\n  const buildChromeOptions = (options: JSONObject) => {\n    options.chrome = '';\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        let options = buildOptions();\n        /** Append chrome options */\n        options = buildChromeOptions(options);\n\n        window.twttr.widgets[methodName](\n          {\n            // @ts-ignore\n            sourceType: props.sourceType,\n            // @ts-ignore\n            screenName: props.screenName,\n            // @ts-ignore\n            userId: props.userId,\n            // @ts-ignore\n            ownerScreenName: props.ownerScreenName,\n            // @ts-ignore\n            slug: props.slug,\n            // @ts-ignore\n            id: props.id || props.widgetId,\n            // @ts-ignore\n            url: props.url\n          },\n          ref?.current,\n          options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTimelineEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterShareButtonProps {\n  /**\n   * Url for sharing\n   */\n  url: string;\n  /**\n   * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createShareButton';\n\nconst TwitterShareButton = (props: TwitterShareButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.url,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterShareButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterFollowButtonProps {\n  /**\n   * Username of twitter user which will be followed on click\n   */\n  screenName: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createFollowButton';\n\nconst TwitterFollowButton = (props: TwitterFollowButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterFollowButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterHashtagButtonProps {\n  /**\n   * Tag name for hashtag button\n   */\n  tag: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createHashtagButton';\n\nconst TwitterHashtagButton = (props: TwitterHashtagButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tag,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterHashtagButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMentionButtonProps {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMentionButton';\n\nconst TwitterMentionButton = (props: TwitterMentionButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMentionButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTweetEmbedProps {\n  /**\n   * Tweet id that needs to be shown\n   */\n  tweetId: string;\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createTweet';\n\nconst TwitterTweetEmbed = (props: TwitterTweetEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tweetId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTweetEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMomentShareProps {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMoment';\n\nconst TwitterMomentShare = (props: TwitterMomentShareProps) => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.momentId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMomentShare;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterDMButtonProps {\n  /**\n   * Twitter user id for DM button\n   */\n  id: number;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createDMButton';\n\nconst TwitterDMButton = (props: TwitterDMButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.id,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          if (isComponentMounted) {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterDMButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\nexport interface TwitterVideoEmbedProps {\n  /**\n   * Id of video tweet.\n   */\n  id: string;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createVideo';\n\nconst TwitterVideoEmbed = (props: TwitterVideoEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](props.id, ref?.current).then(\n          (element: any) => {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        );\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterVideoEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterOnAirButtonProps {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createPeriscopeOnAirButton';\n\nconst TwitterOnAirButton = (props: TwitterOnAirButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.username,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterOnAirButton;\n"]},"metadata":{},"sourceType":"module"}