{"version":3,"file":"index.js","sources":["../src/components/twiter-widget-url.ts","../src/components/TwitterTimelineEmbed.tsx","../src/components/TwitterShareButton.tsx","../src/components/TwitterFollowButton.tsx","../src/components/TwitterHashtagButton.tsx","../src/components/TwitterMentionButton.tsx","../src/components/TwitterTweetEmbed.tsx","../src/components/TwitterMomentShare.tsx","../src/components/TwitterDMButton.tsx","../src/components/TwitterVideoEmbed.tsx","../src/components/TwitterOnAirButton.tsx"],"sourcesContent":["const twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nexport default twitterWidgetJs;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTimelineEmbedBase {\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Automatically fit into parent container height\n   */\n  autoHeight?: boolean;\n  /**\n   * With dark or light theme\n   */\n  theme?: 'dark' | 'light';\n  /**\n   * With custom link colors. Note: Only Hex colors are supported.\n   */\n  linkColor?: string;\n  /**\n   * With custom border colors. Note: Only Hex colors are supported.\n   */\n  borderColor?: string;\n  /**\n   * Hide the header from timeline\n   */\n  noHeader?: boolean;\n  /**\n   * Hide the footer from timeline\n   */\n  noFooter?: boolean;\n  /**\n   * Hide the border from timeline\n   */\n  noBorders?: boolean;\n  /**\n   * Hide the scrollbars\n   */\n  noScrollbar?: boolean;\n  /**\n   * Enable Transparancy\n   */\n  transparent?: boolean;\n  /**\n   * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n   */\n  lang?: string;\n  /**\n   * ariaPolite\n   */\n  ariaPolite?: 'polite' | 'assertive' | 'rude';\n  /**\n   * Limit of tweets to be shown\n   */\n  tweetLimit?: number;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nexport interface TwitterTimelineEmbedSourceScreenName\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * username of twitter handle as String\n   */\n  screenName: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUserId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of profile, likes\n   */\n  sourceType: 'profile' | 'likes';\n  /**\n   * UserId of twitter handle as number\n   */\n  userId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimeline\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string;\n}\n\nexport interface TwitterTimelineEmbedSourceTimelineWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of timeline\n   */\n  sourceType: 'timeline';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  widgetId: string;\n}\n\nexport interface TwitterTimelineEmbedSourceList\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, used along with slug\n   */\n  ownerScreenName: string;\n  /**\n   * To show list, used along with ownerScreenName\n   */\n  slug: string;\n}\n\nexport interface TwitterTimelineEmbedSourceListId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be either of list\n   */\n  sourceType: 'list';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionId\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list id\n   * Also used with collections, in that case its valid collection id\n   */\n  id: string | number;\n}\n\nexport interface TwitterTimelineEmbedSourceCollectionUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be collection\n   */\n  sourceType: 'collection';\n  /**\n   * To show list, unique list url\n   * Also used with collections, in that case its valid collection id\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceUrl\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be url\n   */\n  sourceType: 'url';\n  /**\n   * To show twitter content with url.\n   * Supported content includes profiles, likes, lists, and collections.\n   */\n  url: string;\n}\n\nexport interface TwitterTimelineEmbedSourceWidget\n  extends TwitterTimelineEmbedBase {\n  /**\n   * This can be widget\n   */\n  sourceType: 'widget';\n  /**\n   * To show custom widget\n   */\n  widgetId: string;\n}\n\nexport type TwitterTimelineEmbedPropsType =\n  | TwitterTimelineEmbedSourceScreenName\n  | TwitterTimelineEmbedSourceUserId\n  | TwitterTimelineEmbedSourceTimeline\n  | TwitterTimelineEmbedSourceTimelineWidget\n  | TwitterTimelineEmbedSourceList\n  | TwitterTimelineEmbedSourceListId\n  | TwitterTimelineEmbedSourceCollectionId\n  | TwitterTimelineEmbedSourceCollectionUrl\n  | TwitterTimelineEmbedSourceUrl\n  | TwitterTimelineEmbedSourceWidget;\n\n// export interface TwitterTimelineEmbedProps {\n//   sourceType: 'profile' | 'likes' | 'list' | 'collection' | 'URL' | 'widget'\n//   url: string;\n//   options?: JSONObject,\n//   placeholder?: string | React.ReactNode;\n//   onLoad?: (element: any) => void;\n// };\n\nconst methodName = 'createTimeline';\n\nconst TwitterTimelineEmbed = (props: TwitterTimelineEmbedPropsType): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  const buildOptions = () => {\n    let options = Object.assign({}, props.options);\n    if (props?.autoHeight) {\n      options.height = (ref.current?.parentNode as HTMLElement)?.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props?.theme,\n      linkColor: props?.linkColor,\n      borderColor: props?.borderColor,\n      lang: props?.lang,\n      tweetLimit: props?.tweetLimit,\n      ariaPolite: props?.ariaPolite\n    });\n\n    return options;\n  };\n\n  const buildChromeOptions = (options: JSONObject) => {\n    options.chrome = '';\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        let options = buildOptions();\n        /** Append chrome options */\n        options = buildChromeOptions(options);\n\n        window.twttr.widgets[methodName](\n          {\n            // @ts-ignore\n            sourceType: props.sourceType,\n            // @ts-ignore\n            screenName: props.screenName,\n            // @ts-ignore\n            userId: props.userId,\n            // @ts-ignore\n            ownerScreenName: props.ownerScreenName,\n            // @ts-ignore\n            slug: props.slug,\n            // @ts-ignore\n            id: props.id || props.widgetId,\n            // @ts-ignore\n            url: props.url\n          },\n          ref?.current,\n          options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTimelineEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterShareButtonProps {\n  /**\n   * Url for sharing\n   */\n  url: string;\n  /**\n   * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createShareButton';\n\nconst TwitterShareButton = (props: TwitterShareButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.url,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterShareButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterFollowButtonProps {\n  /**\n   * Username of twitter user which will be followed on click\n   */\n  screenName: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createFollowButton';\n\nconst TwitterFollowButton = (props: TwitterFollowButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterFollowButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterHashtagButtonProps {\n  /**\n   * Tag name for hashtag button\n   */\n  tag: string;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createHashtagButton';\n\nconst TwitterHashtagButton = (props: TwitterHashtagButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tag,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterHashtagButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMentionButtonProps {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMentionButton';\n\nconst TwitterMentionButton = (props: TwitterMentionButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.screenName,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMentionButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterTweetEmbedProps {\n  /**\n   * Tweet id that needs to be shown\n   */\n  tweetId: string;\n  /**\n   * Additional options to pass to twitter widget plugin\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createTweet';\n\nconst TwitterTweetEmbed = (props: TwitterTweetEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.tweetId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterTweetEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterMomentShareProps {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createMoment';\n\nconst TwitterMomentShare = (props: TwitterMomentShareProps) => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.momentId,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterMomentShare;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterDMButtonProps {\n  /**\n   * Twitter user id for DM button\n   */\n  id: number;\n  /**\n   * Additional options to be added to the button\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createDMButton';\n\nconst TwitterDMButton = (props: TwitterDMButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.id,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          if (isComponentMounted) {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterDMButton;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\nexport interface TwitterVideoEmbedProps {\n  /**\n   * Id of video tweet.\n   */\n  id: string;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createVideo';\n\nconst TwitterVideoEmbed = (props: TwitterVideoEmbedProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](props.id, ref?.current).then(\n          (element: any) => {\n            setLoading(false);\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        );\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterVideoEmbed;\n","import React from 'react';\nimport twitterWidgetJs from './twiter-widget-url';\n\ndeclare global {\n  interface Window {\n    twttr: any;\n  }\n}\n\ninterface JSONObject {\n  [k: string]: any;\n}\n\nexport interface TwitterOnAirButtonProps {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: string;\n  /**\n   * Additional options for overriding config.\n   */\n  options?: JSONObject;\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder?: string | React.ReactNode;\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad?: (element: any) => void;\n}\n\nconst methodName = 'createPeriscopeOnAirButton';\n\nconst TwitterOnAirButton = (props: TwitterOnAirButtonProps): any => {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    let isComponentMounted = true;\n    const script = require('scriptjs');\n    script(twitterWidgetJs, 'twitter-embed', () => {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\n            `Method ${methodName} is not present anymore in twttr.widget api`\n          );\n          return;\n        }\n\n        window.twttr.widgets[methodName](\n          props.username,\n          ref?.current,\n          props.options\n        ).then((element: any) => {\n          setLoading(false);\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n\n    // cleaning up\n    return () => {\n      isComponentMounted = false;\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      {loading && <React.Fragment>{props.placeholder}</React.Fragment>}\n      <div ref={ref} />\n    </React.Fragment>\n  );\n};\n\nexport default TwitterOnAirButton;\n"],"names":["twitterWidgetJs","methodName","TwitterTimelineEmbed","props","ref","React","useRef","useState","loading","setLoading","buildOptions","options","Object","assign","autoHeight","height","current","parentNode","offsetHeight","theme","linkColor","borderColor","lang","tweetLimit","ariaPolite","buildChromeOptions","chrome","noHeader","noFooter","noBorders","noScrollbar","transparent","useEffect","isComponentMounted","script","require","window","twttr","console","error","widgets","sourceType","screenName","userId","ownerScreenName","slug","id","widgetId","url","then","element","onLoad","Fragment","placeholder","TwitterShareButton","TwitterFollowButton","TwitterHashtagButton","tag","TwitterMentionButton","TwitterTweetEmbed","tweetId","TwitterMomentShare","momentId","TwitterDMButton","TwitterVideoEmbed","TwitterOnAirButton","username"],"mappings":"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"}